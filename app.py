from time import sleep

from aiogram import Bot, Dispatcher, types, executor
from aiogram.dispatcher import FSMContext

from data.config import my_token
# from keyboard.inlinekeyboard import inlinkeyboard
from Utils.set_bot_commands import set_default_commands

# –ü–∞–º—è—Ç—å
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# from aiogram.contrib.fsm_storage.redis import RedisStorage2

### –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from keyboard.inlinekeyboard.implementer import *
from keyboard.inlinekeyboard.customer_keyboard import *
# from DataBase import add_to_database_customers
from aiogram.dispatcher.filters.state import State, StatesGroup

from users.support import *
from keyboard.inlinekeyboard.support import *
from loader import bot, dp

async def on_startup(dp):
    await set_default_commands(dp)


class Customer(StatesGroup):
    question1 = State()
    question2 = State()


# bot = Bot(token=my_token)
# # dp = Dispatcher(bot)
# # dp = Dispatcher(bot, storage=RedisStorage2())
# dp = Dispatcher(bot, storage=MemoryStorage())

global a, b










'''''
#### –°–Ω–∏–∑—É –∫–æ–¥ –¥–ª—è –∫–ª–∞–≤–∏—à–∏ Back 
'''''


@dp.callback_query_handler(lambda c: c.data == 'back1')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ : ',
                           reply_markup=inlinkeyboard())


@dp.callback_query_handler(lambda c: c.data == 'back2')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ : ',
                           reply_markup=customer_keyboard1())


@dp.callback_query_handler(lambda c: c.data == 'back3')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã. –í—ã–±–µ—Ä–∏—Ç–µ : ',
                           reply_markup=customer_keyboard_data())


'''''
#### –°–≤–µ—Ä—Ö—É –∫–æ–¥ –¥–ª—è –∫–ª–∞–≤–∏—à–∏ Back 
'''''


# @dp.callback_query_handlers(funk = lambda c: c.data and c.data.startswith('button_1'))
@dp.callback_query_handler(lambda c: c.data == 'button_1')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ú–µ–Ω—é –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è:', reply_markup=inlinkeyboard_2())


@dp.callback_query_handler(lambda c: c.data == 'button_2')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ú–µ–Ω—é –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–∞:', reply_markup=customer_keyboard1())


@dp.callback_query_handler(lambda c: c.data == 'button_3')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í–∞—à–∏ —Ä–∞–±–æ—Ç—ã:', reply_markup=inlinekeyboard_3())


@dp.callback_query_handler(lambda c: c.data == 'button_4')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ '
                                                        '–≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ '
                                                        '–≤–∑—è—Ç—å :', reply_markup=inlinekeyboard_4())

#sfssdsd
@dp.callback_query_handler(lambda c: c.data == 'button_5')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –í–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é:')


@dp.message_handler(commands=['start', '–Ω–∞—á–∞—Ç—å'])
async def send_hello(message: types.message):
    await message.answer(f'–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ , {message.from_user.full_name}!\n'
                         f'–ó–∞–¥–∞—á–∞ —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ -  –ø–æ–º–æ–≥–∞—Ç—å —Å—Ç—É–¥–µ–Ω—Ç–∞–º –∏ —à–∫–æ–ª—å–Ω–∏–∫–∞–º –≤ —É—á–µ–±–µ.\n'
                         f'–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö, –∑–∞–¥–∞—á, –∫—É—Ä—Å–æ–≤—ã—Ö, —Ä–µ—Ñ–µ—Ä–∞—Ç–æ–≤ –∏ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞–Ω–∏–π.\n'
                         f'–ó–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –∂–∏–≤—ã–µ –ª—é–¥–∏, –∞ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç, '
                         f'—á—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ —Å–º–æ–∂–µ—Ç –æ–±–≤–∏–Ω–∏—Ç—å –≤–∞—Å –≤ —Å–ø–∏—Å—ã–≤–∞–Ω–∏–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞.\n'
                         f'–¢–∞–∫ –∂–µ –≤—ã —Å–º–æ–∂–µ—Ç–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å —Å–µ–±–µ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏ –¥–æ–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å—Å—è —Å –Ω–∏–º –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã.\n'
                         f'–ò–ª–∏ –∂–µ —Å—Ç–∞—Ç—å –ø–æ–º–æ—â–Ω–∏–∫–æ–º –¥–ª—è –∫–æ–≥–æ-–ª–∏–±–æ.\n'
                         f'–£—á–∏—Ç–µ—Å—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –≤–º–µ—Å—Ç–µ —Å –Ω–∞–º–∏! '
                         , reply_markup=inlinkeyboard())


'''
### –°–Ω–∏–∑—É –∫–æ–¥ –¥–ª—è –ó–ê–ö–ê–ó–ß–ò–ö–ê (–ø–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞)
'''

'''
#### –ó–¥–µ—Å—å –∏–¥—ë—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –¥–∞—Ç—ã
'''


@dp.callback_query_handler(lambda c: c.data == 'customer_button_7')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ!')
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞:',
                           reply_markup=customer_keyboard3_price())
    global data
    data = 0


@dp.callback_query_handler(lambda c: c.data == 'customer_button_8')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç 1-2 –¥–Ω—è!')
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞:',
                           reply_markup=customer_keyboard3_price())
    global data
    data = 2


@dp.callback_query_handler(lambda c: c.data == 'customer_button_9')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç 1-2 –¥–Ω—è!')
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞:',
                           reply_markup=customer_keyboard3_price())
    global data
    data = 4


@dp.callback_query_handler(lambda c: c.data == 'customer_button_10')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π!')
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞:',
                           reply_markup=customer_keyboard3_price())
    global data
    data = 7


@dp.callback_query_handler(lambda c: c.data == 'customer_button_9')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã —Ä–µ—à–∏–ª–∏ –≤–≤–µ—Å—Ç–∏ –¥–∞—Ç—É —Å–∞–º–∏!')
    await bot.send_message(callback_query.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∞:',
                           reply_markup=customer_keyboard3_price())
    await Customer.question1.set()


'''
#### –°–≤–µ—Ä—Ö—É—Ç –∏–¥—ë—Ç –ø–æ–¥–±–æ—Ä–∫–∞ –¥–∞—Ç—ã
'''

'''
#### –°–Ω–∏–∑—É –∏–¥—ë—Ç –ø–æ–¥–±–æ—Ä–∫–∞ —Ü–µ–Ω
'''


@dp.callback_query_handler(lambda c: c.data == 'button_customer_1_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 100 —Ä—É–±–ª–µ–π')
    global price
    price = 100


@dp.callback_query_handler(lambda c: c.data == 'button_customer_2_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 200 —Ä—É–±–ª–µ–π')
    global price
    price = 200


@dp.callback_query_handler(lambda c: c.data == 'button_customer_3_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 300 —Ä—É–±–ª–µ–π')
    global price
    price = 300


@dp.callback_query_handler(lambda c: c.data == 'button_customer_4_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 400 —Ä—É–±–ª–µ–π')
    global price
    price = 400


@dp.callback_query_handler(lambda c: c.data == 'button_customer_5_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 500 —Ä—É–±–ª–µ–π')
    global price
    price = 500


@dp.callback_query_handler(lambda c: c.data == 'button_customer_6_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 600 —Ä—É–±–ª–µ–π')
    global price
    price = 600


@dp.callback_query_handler(lambda c: c.data == 'button_customer_7_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 700 —Ä—É–±–ª–µ–π')
    global price
    price = 700


@dp.callback_query_handler(lambda c: c.data == 'button_customer_8_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 800 —Ä—É–±–ª–µ–π')
    global price
    price = 800


@dp.callback_query_handler(lambda c: c.data == 'button_customer_9_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 900 —Ä—É–±–ª–µ–π')
    global price
    price = 900


@dp.callback_query_handler(lambda c: c.data == 'button_customer_10_price')
async def process_for_button2(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ 1000 —Ä—É–±–ª–µ–π')
    global price
    price = 1000


'''
#### –°–≤–µ—Ä—Ö—É –∏–¥—ë—Ç –ø–æ–¥–±–æ—Ä–∫–∞ —Ü–µ–Ω
'''


@dp.callback_query_handler(lambda c: c.data == 'customer_button_1')  # customer_button_1
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    # await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–∏—è: ')
    await bot.send_message(callback_query.from_user.id,
                           '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π! –£–∫–∞–∂–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚è≥: ',
                           reply_markup=customer_keyboard_data())
    global a
    await Customer.question1.set()
    a = '–ì—É–º–∞–Ω–∏—Ç–∞—Ä–∏–π'


@dp.callback_query_handler(lambda c: c.data == 'customer_button_2')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ :')
    await bot.send_message(callback_query.from_user.id, '–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚è≥: ',
                           reply_markup=customer_keyboard_data())
    global a
    await Customer.question1.set()
    a = '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç'


@dp.callback_query_handler(lambda c: c.data == 'customer_button_3')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –Æ—Ä–∏—Å—Ç–∞ :')
    await bot.send_message(callback_query.from_user.id, '–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚è≥: ',
                           reply_markup=customer_keyboard_data())
    await Customer.question1.set()
    global a
    a = '–Æ—Ä–∏—Å—Ç'


@dp.callback_query_handler(lambda c: c.data == 'customer_button_4')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –¢–µ—Ö–Ω–∞—Ä—è :')
    await bot.send_message(callback_query.from_user.id, '–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚è≥: ',
                           reply_markup=customer_keyboard_data())
    global a
    await Customer.question1.set()
    a = '–¢–µ—Ö–Ω–∞—Ä—å'


@dp.callback_query_handler(lambda c: c.data == 'customer_button_5')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–∞ :')
    await bot.send_message(callback_query.from_user.id, '–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚è≥: ',
                           reply_markup=customer_keyboard_data())
    global a
    a = '–ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫'
    await Customer.question1.set()


@dp.callback_query_handler(lambda c: c.data == 'customer_button_6')
async def process_for_button_1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –≠–∫–æ–Ω–æ–º–∏—Å—Ç–∞ :')
    await bot.send_message(callback_query.from_user.id, '–û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ‚è≥: ',
                           reply_markup=customer_keyboard_data())
    await Customer.question1.set()
    global a
    a = '–≠–∫–æ–Ω–æ–º–∏—Å—Ç'


'''
### –°–≤–µ—Ä—Ö—É –∫–æ–¥ –¥–ª—è –ó–ê–ö–ê–ó–ß–ò–ö–ê (–ø–æ–¥–±–æ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–∞)
'''


@dp.message_handler(state=Customer.question1)  ### –ø–µ—Ä–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
async def send_text(message: types.message, state: FSMContext):
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: ', reply_markup=customer_keyboard_data())
    answer = message.text
    global data
    data = answer
    await state.update_data(answer1=answer)
    await message.answer('–í–æ—Ç –í–∞—à–∞ –¥–∞—Ç–∞: {}'.format(answer))  # (state.get_data())
    # sleep(1)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å: ', reply_markup=customer_keyboard3_price())

    await Customer.next()


@dp.message_handler(state=Customer.question2)  ## –°–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–µ (–≤–≤–æ–¥–∏–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å)
async def send_text(message: types.message, state: FSMContext):
    answer = message.text
    await state.update_data(answer2=answer)
    data = await state.get_data()
    answer1 = data.get('answer1')
    answer2 = data.get('answer2')
    await message.answer('–í–æ—Ç –í–∞—à–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å: {} {}'.format(answer1, answer2))
    await message.answer('–í–æ—Ç –í–∞—à–µ –∏–º—è: {}\n'
                         '–í–æ—Ç –í–∞—à Chat_id{}\n'
                         '–í–æ—Ç –í–∞—à –ø—Ä–µ–¥–º–µ—Ç{}\n'
                         '–í–æ—Ç –í–∞—à–∏ —Å—Ä–æ–∫–∏ –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞(–≤ –¥–Ω—è—Ö){}\n'
                         '{}\n')
    await state.finish()


'''
#### –°–ù–ò–ó–£ –û–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ 
'''
### –ö–∞–∫ —è –º–æ–≥—É —É–≤–∏–¥–µ—Ç—å —Å–≤–æ–π id
### –ö–∞–∫ —è –º–æ–≥—É –∏–∑–≤–ª–µ—á—å —á—É–∂–æ–π id

# chat_id1 = 484050440  # –Ø
# chat_id2 = 492075107
# chat_id3 = 651741256   # –î—Ä—É–≥–æ–π –∞–∫–∫
#
# chat_id4 = 931180948 # –ú–∞–º–∞
#
# dialog1 = []
# dialog2 = []
# dialog3 = []


# @dp.message_handler()
# async def first_function(message):
#     if message.from_user.id == chat_id1:
#         # if message.text == 'show':
#         print('–°–ª–æ–≤–∞ –î–∏–º—ã {}\n –°–ª–æ–≤–∞ –ï–≥–æ—Ä–∞{}\n –°–ª–æ–≤–∞ –∞–∫–∫–∞{}\n'
#                   .format(dialog1, dialog2, dialog3))
#         dialog1.append(message.text)
#         await bot.send_message(chat_id2, message.text)
#         await bot.send_message(chat_id3, message.text)
#     elif message.from_user.id == chat_id2:
#         print('–°–ª–æ–≤–∞ –î–∏–º—ã {}\n –°–ª–æ–≤–∞ –ï–≥–æ—Ä–∞{}\n –°–ª–æ–≤–∞ –∞–∫–∫–∞{}\n'
#                   .format(dialog1, dialog2, dialog3))
#         dialog2.append(message.text)
#         await bot.send_message(chat_id1, message.text)
#         await bot.send_message(chat_id3, message.text)
#     elif message.from_user.id == chat_id3:
#         print('–°–ª–æ–≤–∞ –î–∏–º—ã {}\n –°–ª–æ–≤–∞ –ï–≥–æ—Ä–∞{}\n –°–ª–æ–≤–∞ –∞–∫–∫–∞{}\n'
#                   .format(dialog1, dialog2, dialog3))
#         dialog3.append(message.text)
#         await bot.send_message(chat_id1, message.text)
#         await bot.send_message(chat_id2, message.text)


'''
#### –°–í–ï–†–•–£ –û–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ 
'''

# @dp.message_handler()
# async def first_function(message):
#     if message.from_user.id == chat_id1:
#         # if message.text == 'show':
#         dialog1.append(message.text)
#         print('–°–ª–æ–≤–∞ –î–∏–º—ã {}'
#                   .format(dialog1, dialog2, dialog3))
#         await bot.send_message(chat_id4, message.text)
#         await bot.send_message(chat_id3, message.text)
#     elif message.from_user.id == chat_id4:
#         dialog2.append(message.text)
#         print('–°–ª–æ–≤–∞ –ú–∞–º—ã{}\n'
#                   .format(dialog2, dialog2, dialog3))
#         await bot.send_message(chat_id1, message.text)
#         await bot.send_message(chat_id3, message.text)
#     elif message.from_user.id == chat_id3:
#         dialog3.append(message.text)
#         print('–°–ª–æ–≤–∞ –î–∏–º—ã {}\n –°–ª–æ–≤–∞ –ú–∞–º—ã{}\n –°–ª–æ–≤–∞ –∞–∫–∫–∞{}\n'
#                   .format(dialog1, dialog2, dialog3))
#         await bot.send_message(chat_id1, message.text)
#         await bot.send_message(chat_id4, message.text)


executor.start_polling(dp, on_startup=on_startup)
# executor.start_polling(dp, on_shutdown=True)
